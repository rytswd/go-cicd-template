name: Go Code Base Management

on:
  pull_request:
    paths:
      - example/**
      - .github/workflows/go-cicd.yaml
  push:
    branches:
      - main
    paths:
      - example/**
      - .github/workflows/go-cicd.yaml

env:
  GO_VERSION: 1.20.5
  GO_WORKING_DIR: ./example/with-test/

jobs:
  build:
    name: Build and Test # TODO: name needs to be reviewed
    runs-on: ubuntu-latest
    steps:
      - name: Check out
        uses: actions/checkout@v3
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: "${{ env.GO_VERSION }}"

      - name: Restore cached test coverage
        id: go-cached-test-coverage
        uses: actions/cache@v3
        with:
          # Any location that we generate the test coverage report in
          path: |
            ~/.cache/coverage.txt
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-${{ hashFiles('**/lockfiles') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: go build
        run: |
          go build ./...
        working-directory: "${{ env.GO_WORKING_DIR }}"
      - name: go test
        run: |
          go test ./... -coverprofile /tmp/coverage.out -covermode count
        working-directory: "${{ env.GO_WORKING_DIR }}"

      # - name: Setup tmate session
      #   uses: mxschmitt/action-tmate@v3

      - name: Check test coverage
        run: |
          # Check previous coverage
          if [[ -f ~/.cache/coverage.txt ]]; then
          prevCoverage=$(cat ~/.cache/coverage.txt)
          echo "Previous test coverage: ${prevCoverage}% (taken from the cache)"
          else
          echo "Previous test coverage: Not found"
          fi

          # Get into directory so that go tool cover can work
          cd "${{ env.GO_WORKING_DIR }}"
          newCoverage=$(go tool cover -func=/tmp/coverage.out | grep total | grep -Eo '[0-9]+\.[0-9]+')
          echo "New test coverage:      ${newCoverage}%"
          echo "${newCoverage}" > /tmp/coverage.txt

      - name: Update cache
        if: always() &&
          github.event_name != 'pull_request'
        run: |
          cp /tmp/coverage.txt ~/.cache/coverage.txt
