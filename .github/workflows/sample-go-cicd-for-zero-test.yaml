name: Go Code Base Management - for example/zero-test
run-name: SAMPLE - Run PR management for `${{ github.ref }}`, triggered by @${{ github.actor }}

# This Action is used for both PR and Push events. In case of PR, some steps
# will be skipped (e.g. cache save), so that it can always refer to the valid
# cache from the main branch.
on:
  pull_request:
    paths:
      - example/zero-test/**
      - .github/workflows/sample-go-cicd-for-zero-test.yaml
  push:
    branches:
      - main
    paths:
      - example/zero-test/**
      - .github/workflows/sample-go-cicd-for-zero-test.yaml

# The rest of action steps are written to take in the following enviromental
# variables. For simple setup, updating the following values should be
# sufficient for adding the same logic to other code paths.
env:
  GO_VERSION: 1.20.5
  GO_WORKING_DIR: ./example/zero-test/
  COVERAGE_THRESHOLD: "0"
  CACHE_NAME: zero-test

jobs:
  build:
    name: Build, Test, Check Test Coverage
    runs-on: ubuntu-latest
    steps:
      # Initial setup
      - name: Check out
        uses: actions/checkout@v3
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: "${{ env.GO_VERSION }}"

      # Restore cache -- this is specifically using the restore action, so that
      # we can control when and when not to save to the cache (i.e. if triggered
      # via PR, do not save to the cache.)
      - name: Restore cache
        id: go-cache
        uses: actions/cache/restore@v3
        with:
          # Any location that we generate the test coverage report in
          path: |
            ~/.cache/coverage.txt
            ~/.cache/go-build
            ~/go/pkg/mod
          key: go-${{ env.CACHE_NAME }}-${{ hashFiles('**') }}
          restore-keys: |
            go-${{ env.CACHE_NAME }}-

      # Go build and test -- note how this saves the coverage into a /tmp/ dir,
      # so that it could be compared to the cached coverage data.
      - name: go build
        run: |
          go build ./...
        working-directory: "${{ env.GO_WORKING_DIR }}"
      - name: go test
        run: |
          go test ./... -coverprofile /tmp/coverage.out -covermode count
        working-directory: "${{ env.GO_WORKING_DIR }}"

      # NOTE: If you want to debug the output interactively, comment this
      #       step in, which would give you an SSH session.
      # - name: Setup tmate session
      #   uses: mxschmitt/action-tmate@v3

      - name: Get test coverage
        run: |
          ## Step 1. Check previous coverage
          if [[ -f ~/.cache/coverage.txt ]]; then
          prevCoverage=$(cat ~/.cache/coverage.txt | grep total | grep -Eo '[0-9]+\.[0-9]+' || echo "unknown")
          # When it reports "unknown %", it means cache contained malformed data.
          echo "Previous test coverage: ${prevCoverage}% (taken from the cache)"
          else
          echo "Previous test coverage: Not found"
          fi

          ## Step 2. Check new coverage
          # Get into directory so that go tool cover can work
          cd "${{ env.GO_WORKING_DIR }}"
          go tool cover -func=/tmp/coverage.out > /tmp/coverage.txt
          newCoverage=$(cat /tmp/coverage.txt | grep total | grep -Eo '[0-9]+\.[0-9]+')
          echo "New test coverage:      ${newCoverage}%"

          ## Step 3. Set environment variables
          echo "PREV_COVERAGE=$prevCoverage" >> $GITHUB_ENV
          echo "NEW_COVERAGE=$newCoverage" >> $GITHUB_ENV

      - name: Check coverage status
        run: |
          echo "Coverage Threshold:     ${{ env.COVERAGE_THRESHOLD }}%"
          echo "Previous test coverage: ${{ env.PREV_COVERAGE || 'Unknown' }}%"
          echo "New test coverage:      ${{ env.NEW_COVERAGE }}%"
          echo

          isBelowThreshold=$(bc <<< "${{ env.COVERAGE_THRESHOLD }} > ${{ env.NEW_COVERAGE }}")
          if (( $isBelowThreshold )); then
          echo "ERROR: The test coverage is below the threshold, exiting as failed."
          exit 1
          fi

          isNewWorse=$(bc <<< "${{ env.PREV_COVERAGE || '0' }} > ${{ env.NEW_COVERAGE }}")
          if (( $isNewWorse )); then
          echo "ERROR: The new coverage is worse than the previous coverage, exiting as failed."
          exit 1
          fi

          echo "The new coverage is greater or equal to the previous coverage, and passes the threshold."

      # If triggered from non-PR setup, copy the new coverage as the new cached data.
      - name: Copy coverage information for cache
        if: always() &&
          github.event_name != 'pull_request'
        run: |
          cp /tmp/coverage.txt ~/.cache/coverage.txt

      # If triggered from non-PR setup, save the cache.
      - name: Save cache
        if: always() &&
          github.event_name != 'pull_request'
        uses: actions/cache/save@v3
        with:
          key: ${{ steps.go-cache.outputs.cache-primary-key }}
          # Any location that we generate the test coverage report in
          path: |
            ~/.cache/coverage.txt
            ~/.cache/go-build
            ~/go/pkg/mod
